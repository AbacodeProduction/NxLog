define ROOT C:\Program Files\nxlog 
define OUTPUT_DESTINATION_ADDRESS IPHere
define OUTPUT_DESTINATION_PORT 514

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log


<Extension json>
    Module      xm_json
</Extension>

<Extension syslog>
    Module      xm_syslog
</Extension>

<Input internal>
    Module      im_internal
</Input>

<Input eventlog>
    Module      im_mseventlog
    Exec if ($EventID == 5156) OR ($EventID == 5158) drop();
</Input>


<Output out>

Module      om_udp
Host        %OUTPUT_DESTINATION_ADDRESS%
Port        %OUTPUT_DESTINATION_PORT%
Exec        $EventTime = integer($EventTime) / 1000000;
Exec        $Message = to_json(); to_syslog_bsd();

</Output>

<Route 1>
Path 	eventlog, internal => out
</Route>

############################################################################
####                      NXLOG WITH PATTERNDB                         #####
####    Uncomment the following lines for Windows Events filtered      #####
############################################################################

#<Input internal_Pattern>
#    Module      im_internal
#</Input>

#<Input eventlog_Pattern>
#    Module      im_msvistalog
#    Query       <QueryList>\
#                    <Query Id="0">\
#                        <Select Path="Application">*</Select>\
#                        <Select Path="System">*</Select>\
#                        <Select Path="Security">*</Select>\
#                    </Query>\
#                </QueryList>
#</Input>

#<Processor match_events>
#     Module          pm_pattern
#     PatternFile     %ROOT%\conf\patterndb.xml
#</Processor>

#<Output out_Pattern>
#    Module      om_udp
#    Host        %OUTPUT_DESTINATION_ADDRESS%
#    Port        %OUTPUT_DESTINATION_PORT%
#    Exec        $EventTime = integer($EventTime) / 1000000;
#    Exec        if not defined $PatternID or not defined $Message { drop(); }
#    Exec        $Message = to_json(); to_syslog_bsd();
#</Output>

#<Route route_Pattern>
#    Path 	eventlog_Pattern, internal_Pattern => match_events => out_Pattern
#</Route>

############################################################################
#####                     /NXLOG WITH PATTERNDB                        #####
############################################################################

############################################################################
####                             IIS-NXLOG                             #####
####       Uncomment the following lines for IIS log forwarding        #####
############################################################################

#<Extension IIS_w3c>
#   Module xm_csv
#   Fields $date, $time, $s_ip, $cs_method, $cs_uri_stem, $cs_uri_query, $s_port, $cs_username, $c_ip, $cs_User_Agent, $cs_Referer, $sc_status, $sc_substatus, $sc_win32_status, $time_taken
#   FieldTypes string, string, string, string, string, string, integer, string, string, string, string, integer, integer, integer, integer
#   Delimiter ' '
#</Extension>

#<Input IIS_IN>
#   Module im_file
#   File "C:\\inetpub\\logs\\LogFiles\\W3SVC1\\u_ex*"
#   SavePos TRUE

#   Exec if $raw_event =~ /^#/ drop(); \
#   else \
#   { \
#   IIS_w3c->parse_csv(); \
#   $EventTime = parsedate($date + " " + $time); \
#   $SourceName = "IIS"; \
#   }
#</Input>

#<Output IIS_OUT>
#   Module om_udp
#   Host %OUTPUT_DESTINATION_ADDRESS%
#   Port %OUTPUT_DESTINATION_PORT%
#   Exec $EventTime = strftime($EventTime, '%Y-%m-%d %H:%M:%S');
#   Exec $Message = to_json(); to_syslog_bsd();
#</Output>

#<Route IIS_Route>
#   Path IIS_IN => IIS_OUT
#</Route>

############################################################################
#####                         /IIS-NXLOG                               #####
############################################################################

#######################################################################################################
####                                      IIS-NXLOG-Extended                                      #####
#### NOTE: USE THIS CONF FOR IIS LOGS WITH CS-HOST, SC-BYTES, CS-BYTES AND X-FORWARDED-FOR FIELDS #####
####                      Uncomment the following lines for IIS log forwarding                    #####
#######################################################################################################

#<Extension IIS_w3c_extended>
#  Module xm_csv
#  Fields $date, $time, $s_ip, $cs_method, $cs_uri_stem, $cs_uri_query, $s_port, $cs_username, $c_ip, $cs_User_Agent, $cs_Referer, $cs_host, $sc_status, $sc_substatus, $sc_win32_status, $sc_bytes, $cs_bytes, $time_taken, $x-forwarded-for
#  FieldTypes string, string, string, string, string, string, integer, string, string, string, string, string, integer, integer, integer, integer, integer,integer, string
#  Delimiter ' '
#</Extension>

#<Input IIS_Extended_IN>
#  Module im_file
#  File "C:\\inetpub\\logs\\LogFiles\\W3SVC1\\u_ex*"
#  SavePos TRUE
#  Exec if $raw_event =~ /^#/ drop(); \
#  else \
#  { \
#    IIS_w3c_extended->parse_csv(); \
#    $EventTime = parsedate($date + " " + $time); \
#    $SourceName = "IIS"; \
#  }
#</Input>

#<Output IIS_Extended_OUT>
#  Module om_udp
#  Host %OUTPUT_DESTINATION_ADDRESS%
#  Port %OUTPUT_DESTINATION_PORT%
#  Exec $EventTime = strftime($EventTime, '%Y-%m-%d %H:%M:%S');
#  Exec $Message = to_json(); to_syslog_bsd();
#</Output>

#<Route IIS_Extended_Route>
#  Path	IIS_Extended_IN => IIS_Extended_OUT
#</Route>

############################################################################
#####                    /IIS-NXLOG-Extended                           #####
############################################################################

############################################################################
####                          WINDOWS-FW-NXLOG                         #####
#### Uncomment the following lines for WINDOWS FIREWALL log forwarding #####
############################################################################

#<Extension transform_alienvault_csv_windows_firewall>
#    Module          xm_csv
#    Fields          date, time, action, protocol, src-ip, dst-ip, src-port, dst-port, size, tcpflags, tcpsyn, tcpack, tcpwin, icmptype, icmpcode, info, path
#    FieldTypes      string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
#    Delimiter       ' '
#</Extension>

#<Input FW_IN>
#    Module      im_file
#    File        "C:\\Windows\\System32\\LogFiles\\Firewall\\pfirewall.log"
#   SavePos     TRUE
#   InputType   LineBased
#      Exec if $raw_event =~ /^#/ drop();\
#      else\
#       {\
#               transform_alienvault_csv_windows_firewall->parse_csv();\
#               $EventTime = parsedate($date + " " + $time); \
#               $Message = $raw_event; \
#               $SourceName = "WINDOWS-FW";\
#       }
#</Input>

#<Output FW_OUT>
#   Module om_udp
#   Host %OUTPUT_DESTINATION_ADDRESS%
#   Port %OUTPUT_DESTINATION_PORT%
#   Exec $EventTime = strftime($EventTime, '%Y-%m-%d %H:%M:%S, %z');
#   Exec $Message = to_json(); to_syslog_bsd();
#</Output>

#<Route route_windows_fw_nxlog>
#    Path        FW_IN => FW_OUT
#</Route>

############################################################################
####                          /WINDOWS-FW-NXLOG                        #####
############################################################################

############################################################################
####                             DHCP-NXLOG                            #####
####     Uncomment the following lines for DHCP log forwarding         #####
####     Use "system32" for DHCP Log location on 32 Bit systems        #####
############################################################################

#<Extension transform_alienvault_dhcp_csv>
#
#    Module          xm_csv
#    Fields          $EventReceivedTime, $Message
#    FieldTypes      string, string
#    Delimiter       ;
#
#</Extension>


#<Input DHCP_IN>
#    Module      im_file
#    File        "C:\\Windows\\Sysnative\\dhcp\\DhcpSrvLog-*.log"
#    SavePos     TRUE
#    InputType   LineBased
#    Exec        if $raw_event =~ /^[0-3][0-9],/\
#                {\
#                      $Message = $raw_event;\
#                      if $Message =~ s/^00/1000/;\
#                      $raw_event = to_json();\
#                      $SourceName = "DHCP-NXLOG";\
#                }\
#                else\
#                      drop();
#</Input>

#<Output DHCP_OUT>
#    Module      om_udp
#    Host        %OUTPUT_DESTINATION_ADDRESS%
#    Port        %OUTPUT_DESTINATION_PORT%
#    Exec        $Hostname = hostname_fqdn();
#    Exec        transform_alienvault_dhcp_csv->to_csv(); to_syslog_bsd();
#</Output>

#<Route DHCP>
#    Path DHCP_IN => DHCP_OUT
#</Route>

#######################################################################
####                        /DHCP-NXLOG                           #####
#######################################################################

#######################################################################
####                          DNS-NXLOG                           #####
####     Uncomment the following lines for DNS log forwarding     #####
####     Use C:\\Logs\\dns.log File location for 32 Bit Systems   #####
#######################################################################
#
#<Input DNS_IN>
#   Module    im_file
#   File    "C:\\Windows\\Sysnative\\dns\\dns.log"
#   SavePos  TRUE
#   InputType LineBased
#   Exec if ($raw_event =~ /^#/) OR ($raw_event == '') drop();\
#       else\
#           {\
#           $Message = $raw_event;\
#           $SourceName = "DNS";\
#           $raw_event = to_json();\
#           }
#</Input>
#
#<Output DNS_OUT>
#   Module          om_udp
#   Host            %OUTPUT_DESTINATION_ADDRESS%
#   Port            %OUTPUT_DESTINATION_PORT%
#   Exec            if not defined $Message { drop(); }
#   Exec            $Message = replace($Message, "a.m.", "AM");
#   Exec            $Message = replace($Message, "p.m.", "PM");
#
#   Exec            $Message = replace($Message, "\t", " "); $Message = replace($Message, "\n", " "); $Message = replace($Message, "\r", " ");
#
#   Exec            if not defined $AccountName { $AccountName = "-"; }
#   Exec            if not defined $AccountType { $AccountType = "-"; }
#   Exec            if not defined $Domain { $Domain = "-"; }
#
#   Exec	    	 $Hostname = hostname_fqdn();
#   Exec            $raw_event = $Hostname + ' DNS-NXLOG: ' + $raw_event;
#   Exec            $Message = to_json(); to_syslog_bsd();
#</Output>
#
#<Route route_dns_nxlog>
#   Path        DNS_IN => DNS_OUT
#</Route>
#
#######################################################################
####                         /DNS-NXLOG                           #####
#######################################################################

#######################################################################
####                          EXCHANGE-NXLOG                      #####
####   Uncomment the following lines for Exchange log forwarding  #####
#######################################################################
#<Extension transform_alienvault_csv_exchange>
#Module         	xm_csv
#Fields	    	date_time, client_ip, client_hostname, server_ip, server_hostname, source_context, connector_id, source, event_id, internal_message_id, message_id, network_message_id, recipient_address, recipient_status, total_bytes, recipient_count, related_recipient_address, reference, message_subject, sender_address, return_path, message_info, directionality, tenant_id, original_client_ip, original_server_ip, custom_data
#FieldTypes 		string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
#Delimiter      	,
#</Extension>
#
#<Input EXCHANGE_IN>
#
#Module      im_file
## Modify the file path if it is needed
#File        "C:\\Program Files\\Microsoft\\Exchange Server\\V15\\TransportRoles\\Logs\\MessageTracking\\MSGTRK????????*-*.log"
#SavePos     TRUE
#Exec if ($raw_event =~ /^#/) OR ($raw_event =~ /HealthMailbox/) drop();\
#else\
#{\
#transform_alienvault_csv_exchange->parse_csv();\
#$Message = $raw_event;\
#$SourceName = "EXCHANGE-NXLOG";\
#}
#</Input>
#
#<Output EXCHANGE_OUT>
#
#Module      om_udp
#Host        %OUTPUT_DESTINATION_ADDRESS%
#Port        %OUTPUT_DESTINATION_PORT%
#Exec $Message = to_json(); to_syslog_bsd();
#
#</Output>
#
#<Route EXCHANGE>
#
#Path EXCHANGE_IN => EXCHANGE_OUT
#
#</Route>
#
#######################################################################
####                          /EXCHANGE-NXLOG                     #####
#######################################################################


######################################################################################
####                                 MSSQL-NXLOG                                 #####
####   Uncomment the following lines for MSSQL log forwarding                    #####
####  The audit mssql logs must be added to Application when enabling auditing.  #####
######################################################################################

#<Input MSSQL_IN>
#Module          im_msvistalog
#SavePos         FALSE
#ReadFromLast    TRUE

#Query          <QueryList>                                         \
#                   <Query Id="0">                                  \
#                       <Select Path="Application">*[System[(EventID='33205')]]</Select>\
#                   </Query>                                    \
#               </QueryList>
#Exec			$Message = $raw_event;
#Exec           if $raw_event =~ /^#/ drop();\
#               else\
#               {\
#                   $SourceName = "MSSQL-NXLOG";\
#               }

#Exec			 if $raw_event =~ /action_id:(\S+)/ $Action_ID = $1;
#Exec			 if $raw_event =~ /database_name:(\S+)/ $DataBase = $1;
#Exec			 if $raw_event =~ /server_instance_name:(\S+)/ $SV_Instace = $1;
#Exec			 if $raw_event =~ /session_server_principal_name:(\S+)/ $User = $1;
#Exec			 if $raw_event =~ /AUDIT_SUCCESS/\
#{\
#$Result = 'Success';\
#}\
#else\
#$Result = 'Failure';
#Exec            $Message = replace($Message, "\t", " "); $Message = replace($Message, "\n", " "); $Message = replace($Message, "\r", " ");
#</Input>

#<Output MSSQL_OUT>
#Module          om_udp
#Host            %OUTPUT_DESTINATION_ADDRESS%
#Port            %OUTPUT_DESTINATION_PORT%

# Exec 			$Message = to_json(); to_syslog_bsd();

#</Output>


#<Route mssql>
#Path            MSSQL_IN => MSSQL_OUT
#</Route>

#######################################################################
####                       /MSSQL-NXLOG                           #####
#######################################################################


#######################################################################
####                        OBSERVEIT                             #####
####   Uncomment the following lines for ObserveIT log forwarding #####
#######################################################################

#<Input ObserveITin>
#    Module    im_file
#    File    "C:\\Program Files (x86)\\ObserveIT\\NotificationService\\LogFiles\\ArcSight\\Observeit_activity_log.cef"
#    SavePos  TRUE
#    InputType LineBased
#    Exec if $raw_event =~ /(CEF:.*)/ $Message = $1;
#    Exec to_syslog_bsd();
#</Input>

#<Output ObserveITout>
#    Module          om_udp
#    Host            %OUTPUT_DESTINATION_ADDRESS%
#    Port            %OUTPUT_DESTINATION_PORT%
#</Output>

#<Route ObserveITroute>
#    Path ObserveITin => ObserveITout
#</Route>

#######################################################################
####                       /OBSERVEIT                             #####
#######################################################################


#######################################################################
####                         SOPHOSEC-NXLOG                       #####
####   Uncomment the following lines for Sophos-EC log forwarding #####
#######################################################################

#<Extension kvp>
#    Module          xm_kvp
#    KVPDelimiter    ;
#    KVDelimiter     =
#</Extension>

#<Extension syslog>
#    Module  xm_syslog
#</Extension>

##Sophosec logs assumed they are located in default location
#<Input SOPHOS_IN>

#    Module      im_file
#    File        "C:\\Program Files (x86)\\Sophos\\Reporting Interface\\Log Files\\DefaultCommonEvents.txt"
#    SavePos     TRUE
#    InputType   LineBased
#    Exec if $raw_event =~ /^#/ drop();\
#    else\
#    {\
#       kvp->parse_kvp();\
#       $Message = $raw_event;\
#    }
#</Input>


#<Output SOPHOS_OUT>

#    Module      om_udp
#    Host        %OUTPUT_DESTINATION_ADDRESS%
#    Port        %OUTPUT_DESTINATION_PORT%
#    Exec        $Hostname = hostname_fqdn();
#    Exec        to_syslog_bsd();
#    Exec        $raw_event = '<13>' + $Hostname + ' SOPHOSEC-NXLOG: ' + 'InsertedAt="' +$InsertedAt + '"; ' + 'EventID="' +$EventID + '"; ' + 'EventTime="' +$EventTime + '"; ' + 'EventTypeID="' +$EventTypeID + '"; ' + 'EventType="' +$EventType + '"; ' + 'Name="' +$Name + '"; ' + 'ReportingName="' +$ReportingName + '"; ' + 'UserName="' +$UserName + '"; ' + 'ActionID="' +$ActionID + '"; ' + 'Action="' +$Action + '"; ' + 'ScanType="' +$ScanType + '"; ' + 'SubTypeID="' +$SubTypeID + '"; ' + 'SubType="' +$SubType + '"; ' + 'ComputerName="' +$ComputerName + '"; ' + 'ComputerDomain="' +$ComputerDomain + '"; ' + 'ComputerIPAddress="' + $ComputerIPAddress + '"';

#</Output>


#<Route Sophos>

#    Path SOPHOS_IN => SOPHOS_OUT

#</Route>
#######################################################################
####                        /SOPHOSEC-NXLOG                       #####
#######################################################################
